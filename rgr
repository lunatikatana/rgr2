#include <iostream>
#include <fstream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <string>
#include <iterator>

using namespace std;

struct human
{
	string name;
	string surname;
};

struct orders
{
	string name;
	string buy;
	double ordr;
};

struct tovari
{
	string tov;
	string formagol;
	string razmer;
	double price;
};

class tovar {
private:
	tovari to[10] = {
		{ "Болт","шестигранная","М6",133 },
		{ " Болт" ,"полукруглая","М5",199 },
		{ " Болт ","потайная","М2",146 },
	};
public:
	ofstream fout;
	ifstream fin;
	int n = 3;
	void Print() {
		for (int i = 0; i < n; i++) {
			cout << setw(4) << " Наименование товара:" << setw(11) << (to + i)->tov;
			
			cout << setw(4) << " форма головки:" << setw(20) << (to + i)->formagol;
			cout << setw(4) << " Размер:" << setw(11) << (to + i)->razmer;
			cout << setw(4) << " Цена:" << setw(11) << (to + i)->price << endl;
		}
	}

	void add() {
		if (n == 10) {
			cout << "Список товаров полон" << endl;
			return;
		}
		cout << "Наименование товара:" << endl;
		cin >> to[n].tov;
		
		cout << "Зерна:" << endl;
		cin >> to[n].formagol;
		cout << "Размер:" << endl;
		cin >> to[n].razmer;
		cout << "Цена:" << endl;
		cin >> to[n].price;
		n++;
	}

	void del() {
		if (n == 0) {
			cout << "Добавленных товаров нет" << endl;
			return;
		}
		cout << "Наименование товара:" << endl;
		string toname;
		cin >> toname;
		int ito = -1;
		for (int i = 0; i < n; i++) {
			if (toname == to[i].tov) {
				ito = i;
				break;
			}
		}
		if (ito == -1) {
			cout << "Такого товара нет" << endl;
			return;
		}
		to[ito] = to[n - 1];
		n--;
		cout << "Товар успешно удален" << endl;
	}

	void change() {
		if (n == 0) {
			cout << "Добавленных товаров нет" << endl;
			return;
		}
		cout << "Введите наименование товара" << endl;
		string toname;
		cin >> toname;
		int ito = -1;
		for (int i = 0; i < n; i++) {
			if (toname == to[i].tov) {
				cout << "Наименование товара:" << endl;
				cin >> to[i].tov;
				
				cout << "Зерна:" << endl;
				cin >> to[i].formagol;
				cout << "Размер:" << endl;
				cin >> to[i].razmer;
				cout << "Цена:" << endl;
				cin >> to[i].price;
				ito = i;
				break;
			}
		}
		if (ito == -1) {
			cout << "Такого товара нет" << endl;
			return;
		}
		cout << "Товар отредактирован" << endl;

	}

	void recording() {
		fout.open("Товары.txt");
		fout << n << endl;
		for (int i = 0; i < n; i++) {
			fout << to[i].tov << endl;
			fout << to[i].formagol << endl;
			fout << to[i].razmer << endl;
			fout << to[i].price << endl;
		}
		fout.close();
	}

	void readOrders() {
		fin.open("Товары.txt");
		fin >> n;
		fin.ignore();
		for (int i = 0; i < n; i++) {
			getline(fin, to[i].tov);
			getline(fin, to[i].formagol);
			cin >> (fin, to[i].razmer);
			cin >> (fin, to[i].price);
			fin.ignore();
		}
		fin.close();
	}
};

class client {
private:
	human hu[20] = {
		{ "Даниил","Островский" },
		{ "Анастасия","Морозова" },
		{ "Геннадий","Горин" },
	};
public:
	ofstream fout;
	ifstream fin;
	int n = 3;
	void Print() {
		for (int i = 0; i < n; i++) {
			cout << setw(4) << " Имя покупателя:" << setw(11) << (hu + i)->name;
			cout << setw(4) << " Фамилия покупателя:" << setw(11) << (hu + i)->surname << endl;
		}
	}

	void add() {
		if (n == 10) {
			cout << "Список покупателей полон" << endl;
			return;
		}
		cout << "Имя покупателя:" << endl;
		cin >> hu[n].name;
		cout << " Фамилия покупателя:" << endl;
		cin >> hu[n].surname;
		n++;
	}

	void del() {
		if (n == 0) {
			cout << "Добавленных покупателей нет" << endl;
			return;
		}
		cout << "Имя покупателя:" << endl;
		string huname;
		cin >> huname;
		int ihu = -1;
		for (int i = 0; i < n; i++) {
			if (huname == hu[i].name) {
				ihu = i;
				break;
			}
		}
		if (ihu == -1) {
			cout << "Такого покупателя нет" << endl;
			return;
		}
		hu[ihu] = hu[n - 1];
		n--;
		cout << "Покупатель удален" << endl;
	}

	void change() {
		if (n == 0) {
			cout << "Добавленных покупателей нет" << endl;
			return;
		}
		cout << "Введите имя покупателя" << endl;
		string huname;
		cin >> huname;
		int ihu = -1;
		for (int i = 0; i < n; i++) {
			if (huname == hu[i].name) {
				cout << "Имя покупателя:" << endl;
				cin >> hu[i].name;
				cout << "Фамилия покупателя:" << endl;
				cin >> hu[i].surname;
				ihu = i;
				break;
			}
		}
		if (ihu == -1) {
			cout << "Такого покупателя нет" << endl;
			return;
		}
		cout << "Покупатель отредактирован" << endl;

	}

	void recording() {
		fout.open("Покупатели.txt");
		fout << n << endl;
		for (int i = 0; i < n; i++) {
			fout << hu[i].name << endl;
			fout << hu[i].surname << endl;
		}
		fout.close();
	}

	void readOrders() {
		fin.open("Покупатели.txt");
		fin >> n;
		fin.ignore();
		for (int i = 0; i < n; i++) {
			getline(fin, hu[i].name);
			getline(fin, hu[i].surname);
			fin.ignore();
		}
		fin.close();
	}
};


class worker {
private:
	human cofcafe[20] = {
		{ "Никита","Фабрициус" },
		{ "Савелий","Стародумов" },
		{ "Семен","Семенов" },
	};
public:
	ofstream fout;
	ifstream fin;
	int n = 3;
	void Print() {
		for (int i = 0; i < n; i++) {
			cout << setw(12) << " Имя сотрудника:" << setw(18) << (cofcafe + i)->name;
			cout << setw(12) << " Фамилия сотрудника:" << setw(18) << (cofcafe + i)->surname << endl;
		}
	}

	void add() {
		if (n == 10) {
			cout << "Список сотрудников полон" << endl;
			return;
		}
		cout << "Имя сотрудника:" << endl;
		cin >> cofcafe[n].name;
		cout << " Фамилия сотрудника:" << endl;
		cin >> cofcafe[n].surname;
		n++;
	}

	void del() {
		if (n == 0) {
			cout << "Добавленных сотрудников нет" << endl;
			return;
		}
		cout << "Имя сотрудника:" << endl;
		string worname;
		cin >> worname;
		int iwor = -1;
		for (int i = 0; i < n; i++) {
			if (worname == cofcafe[i].name) {
				iwor = i;
				break;
			}
		}
		if (iwor == -1) {
			cout << "Такого сотрудника нет" << endl;
			return;
		}
		cofcafe[iwor] = cofcafe[n - 1];
		n--;
		cout << "Сотрудник  удален" << endl;
	}

	void change() {
		if (n == 0) {
			cout << "Добавленных сотрудников нет" << endl;
			return;
		}
		cout << "Введите имя сотрудника" << endl;
		string worname;
		cin >> worname;
		int iwor = -1;
		for (int i = 0; i < n; i++) {
			if (worname == cofcafe[i].name) {
				cout << "Имя сотрудника:" << endl;
				cin >> cofcafe[i].name;
				cout << "Фамилия сотрудника:" << endl;
				cin >> cofcafe[i].surname;
				iwor = i;
				break;
			}
		}
		if (iwor == -1) {
			cout << "Такого сотрудника нет" << endl;
			return;
		}
		cout << "Сотрудник отредактирован" << endl;

	}

	void recording() {
		fout.open("Сотрудники.txt");
		fout << n << endl;
		for (int i = 0; i < n; i++) {
			fout << cofcafe[i].name << endl;
			fout << cofcafe[i].surname << endl;
		}
		fout.close();
	}

	void readOrders() {
		fin.open("Сотрудники.txt");
		fin >> n;
		fin.ignore();
		for (int i = 0; i < n; i++) {
			getline(fin, cofcafe[i].name);
			getline(fin, cofcafe[i].surname);
			fin.ignore();
		}
		fin.close();
	}
};

class Orders {
private:
	orders zak[20] = {
		{ "Евгений","Латте_из_Бразилии",160 },
		{ "Мария","Эспрессо_из_Вьетнама",165 },
		{ "Роман","Капучино_из_Индии",170 } };

public:
	ofstream fout;
	ifstream fin;
	int n = 3;
	void Print() {
		for (int i = 0; i < n; i++) {
			cout << setw(8) << " Имя покупателя:" << setw(11) << (zak + i)->name;
			cout << setw(8) << " Заказ:" << setw(15) << (zak + i)->buy;
			cout << setw(8) << " Размер:" << setw(11) << (zak + i)->ordr << endl;
		}
	}

	void add() {
		if (n == 10) {
			cout << "Список заказов полон" << endl;
			return;
		}
		cout << "Имя покупателя:" << endl;
		cin >> zak[n].name;
		cout << "Заказ:" << endl;
		cin >> zak[n].buy;
		cout << "Размер:" << endl;
		cin >> zak[n].ordr;
		n++;

	}

	void del() {
		if (n == 0) {
			cout << "Добавленных покупателей нет" << endl;
			return;
		}
		cout << "Имя покупателя:" << endl;
		string zaname;
		cin >> zaname;
		int iza = -1;
		for (int i = 0; i < n; i++) {
			if (zaname == zak[i].name) {
				iza = i;
				break;
			}
		}
		if (iza == -1) {
			cout << "Такого заказа нет" << endl;
			return;
		}
		zak[iza] = zak[n - 1];
		n--;
		cout << "Заказ удален" << endl;
	}

	void change() {
		if (n == 0) {
			cout << "Добавленных заказов нет" << endl;
			return;
		}
		cout << "Введите имя покупателя" << endl;
		string zaname;
		cin >> zaname;
		int iza = -1;
		for (int i = 0; i < n; i++) {
			if (zaname == zak[i].name) {
				cout << "Имя покупателя:" << endl;
				cin >> zak[i].name;
				cout << "Заказ:" << endl;
				cin >> zak[i].buy;
				cout << "Размер:" << endl;
				cin >> zak[i].ordr;
				iza = i;
				break;
			}
		}
		if (iza == -1) {
			cout << "Заказа нет" << endl;
			return;
		}
		cout << "Заказ отредактирован" << endl;

	}

	void recording() {
		fout.open("Заказы.txt");
		fout << n << endl;
		for (int i = 0; i < n; i++) {
			fout << zak[i].name << endl;
			fout << zak[i].buy << endl;
			fout << zak[i].ordr << endl;
		}
		fout.close();
	}

	void readOrders() {
		fin.open("Заказы.txt");
		fin >> n;
		fin.ignore();
		for (int i = 0; i < n; i++) {
			getline(fin, zak[i].name);
			getline(fin, zak[i].buy);
			fin >> zak[i].ordr;
			fin.ignore();
		}
		fin.close();
	}
};
class controller : public Orders, public worker, public client, public tovar {
private:
	bool work;
public:
	controller() {
		work = 1;
	}
	bool getwork() {
		return work;
	}
	void showMenu() {
		cout << "Меню:" << endl
			<< "(1) Сотрудники" << endl
			<< "(2) Покупатели" << endl
			<< "(3) Заказ" << endl
			<< "(4) Товары" << endl
			<< "(0) Выход из программы" << endl;

		while (getMenuItem() == -1);
	}
	void showMenu1() {
		cout << "Меню:" << endl
			<< "(1) Вывод всех сотрудников" << endl
			<< "(2) Добавление нового сотрудника" << endl
			<< "(3) Удаление сотрудника с указанием имени" << endl
			<< "(4) Редактирование сотрудника с указанием имени" << endl
			<< "(5) Запись списка сотрудников в файл" << endl
			<< "(6) Считывание списка сотрудников из файла" << endl
			<< "(7) Выход в главное меню" << endl
			<< "(0) Выход из программы" << endl;

		while (getMenuItem1() == -1);
	}
	void showMenu2() {
		cout << "Меню:" << endl
			<< "(1) Вывод всех покупателя" << endl
			<< "(2) Добавление нового покупателя" << endl
			<< "(3) Удаление покупателя с указанием имени" << endl
			<< "(4) Редактирование покупателя с указанием имени" << endl
			<< "(5) Запись списка покупателей в файл" << endl
			<< "(6) Считывание списка покупателей из файла" << endl
			<< "(7) Выход в главное меню" << endl
			<< "(0) Выход из программы" << endl;

		while (getMenuItem2() == -1);
	}
	void showMenu3() {
		cout << "Меню:" << endl
			<< "(1) Вывод всех заказов" << endl
			<< "(2) Добавление нового заказа" << endl
			<< "(3) Удаление заказа с указанием имени" << endl
			<< "(4) Редактирование заказа с указанием имени" << endl
			<< "(5) Запись списка в файл" << endl
			<< "(6) Считывание списка заказов из файла" << endl
			<< "(7) Выход в главное меню" << endl
			<< "(0) Выход из программы" << endl;

		while (getMenuItem3() == -1);
	}
	void showMenu4() {
		cout << "Меню:" << endl
			<< "(1) Вывод всех товаров" << endl
			<< "(2) Добавление нового товара" << endl
			<< "(3) Удаление товара с указанием имени" << endl
			<< "(4) Редактирование товара с указанием имени" << endl
			<< "(5) Запись списка товаров в файл" << endl
			<< "(6) Считывание списка товаров из файла" << endl
			<< "(7) Выход в главное меню" << endl
			<< "(0) Выход из программы" << endl;

		while (getMenuItem4() == -1);
	}
	int getMenuItem() {
		char c;
		cout << "Выбор: ";
		cin >> c;

		if (c == '1') {
			showMenu1();
			return 1;
		}
		else if (c == '2') {
			showMenu2();
			return 2;
		}
		else if (c == '3') {
			showMenu3();
			return 3;
		}
		else if (c == '4') {
			showMenu4();
			return 4;
		}
		else if (c == '0') {
			work = 0;
			return 0;
		}

		else {
			return -1;
		}
	}
	int getMenuItem1() {
		char c;
		cout << "Выбор: ";
		cin >> c;

		if (c == '1') {
			worker::Print();
			return 1;
		}
		else if (c == '2') {
			worker::add();
			return 2;
		}
		else if (c == '3') {
			worker::del();
			return 3;
		}
		else if (c == '4') {
			worker::change();
			return 4;
		}
		else if (c == '5') {
			worker::recording();
			return 5;
		}
		else if (c == '6') {
			worker::readOrders();
			return 6;
		}
		else if (c == '7') {
			showMenu();
			return 7;
		}
		else if (c == '0') {
			work = 0;
			return 0;
		}
		else {
			return -1;
		}
	}
	int getMenuItem2() {
		char c;
		cout << "Выбор: ";
		cin >> c;

		if (c == '1') {
			client::Print();
			return 1;
		}
		else if (c == '2') {
			client::add();
			return 2;
		}
		else if (c == '3') {
			client::del();
			return 3;
		}
		else if (c == '4') {
			client::change();
			return 4;
		}
		else if (c == '5') {
			client::recording();
			return 5;
		}
		else if (c == '6') {
			client::readOrders();
			return 6;
		}
		else if (c == '7') {
			showMenu();
			return 7;
		}
		else if (c == '0') {
			work = 0;
			return 0;
		}
		else {
			return -1;
		}
	}
	int getMenuItem3() {
		char c;
		cout << "Выбор: ";
		cin >> c;

		if (c == '1') {
			Orders::Print();
			return 1;
		}
		else if (c == '2') {
			Orders::add();
			return 2;
		}
		else if (c == '3') {
			Orders::del();
			return 3;
		}
		else if (c == '4') {
			Orders::change();
			return 4;
		}
		else if (c == '5') {
			Orders::recording();
			return 5;
		}
		else if (c == '6') {
			Orders::readOrders();
			return 6;
		}
		else if (c == '7') {
			showMenu();
			return 7;
		}
		else if (c == '0') {
			work = 0;
			return 0;
		}
		else {
			return -1;
		}
	}
	int getMenuItem4() {
		char c;
		cout << "Выбор: ";
		cin >> c;

		if (c == '1') {
			tovar::Print();
			return 1;
		}
		else if (c == '2') {
			tovar::add();
			return 2;
		}
		else if (c == '3') {
			tovar::del();
			return 3;
		}
		else if (c == '4') {
			tovar::change();
			return 4;
		}
		else if (c == '5') {
			tovar::recording();
			return 5;
		}
		else if (c == '6') {
			tovar::recording();
			return 6;
		}
		else if (c == '7') {
			showMenu();
			return 7;
		}
		else if (c == '0') {
			work = 0;
			return 0;
		}
		else {
			return -1;
		}
	}
};
int main()
{
	setlocale(LC_ALL, "rus");
	controller ctrl;
	while (ctrl.getwork())
		ctrl.showMenu();
	return 0;
}

